package method.qr.kiarelemb.utils;

import method.qr.kiarelemb.utils.data.QRCharRandomData;

import java.awt.*;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.concurrent.ThreadLocalRandom;

/**
 * @author Kiarelemb QR
 * @date 2021/11/10 21:42
 * @apiNote 随机数工具类
 */
public class QRRandomUtils {
	//endregion
	public static final ThreadLocalRandom THREAD_LOCAL_RANDOM = ThreadLocalRandom.current();
	private static final int MIN_COLOR_ELEMENT = 80;
	private static final int MAX_COLOR_ELEMENT = 150;
	private static final SecureRandom SECURE_RANDOM = new SecureRandom();
	//region Random numbers
	private static final short[] RANDOM_NUMBERS = {
			682, 807, 937, 999, 570, 828, 407, 919, 805, 941, 563, 544, 918, 298, 418, 950,
			956, 769, 999, 503, 191, 578, 309, 710, 327, 720, 591, 939, 374, 707, 943, 463,
			227, 974, 30, 531, 999, 930, 190, 823, 925, 835, 328, 239, 415, 500, 144, 460,
			169, 167, 348, 515, 846, 628, 735, 687, 574, 701, 404, 585, 316, 510, 973, 999,
			977, 245, 784, 975, 959, 494, 734, 824, 837, 885, 933, 769, 711, 562, 616, 488,
			449, 378, 403, 285, 535, 239, 863, 263, 999, 928, 332, 335, 908, 321, 982, 314,
			297, 918, 917, 424, 978, 992, 979, 906, 535, 515, 850, 980, 125, 378, 307, 883,
			836, 160, 927, 630, 968, 226, 560, 698, 467, 89, 476, 963, 977, 367, 325, 984,
			204, 312, 986, 953, 979, 992, 252, 750, 893, 517, 937, 124, 148, 719, 973, 566,
			405, 949, 452, 777, 349, 961, 967, 783, 220, 802, 917, 604, 216, 363, 920, 621,
			219, 182, 817, 944, 438, 465, 934, 888, 828, 209, 631, 917, 870, 679, 826, 945,
			680, 848, 974, 573, 626, 865, 109, 317, 991, 494, 965, 473, 825, 388, 302, 936,
			660, 150, 922, 949, 999, 392, 963, 634, 772, 143, 990, 895, 538, 859, 541, 32,
			969, 321, 811, 756, 82, 955, 953, 636, 390, 162, 688, 444, 970, 590, 983, 745,
			543, 666, 951, 642, 947, 765, 98, 469, 884, 929, 178, 721, 994, 840, 353, 726,
			940, 759, 624, 919, 667, 929, 272, 979, 926, 608, 453, 11, 322, 347, 647, 354,
			201, 237, 951, 933, 968, 849, 294, 115, 957, 814, 854, 373, 186, 872, 991, 523,
			931, 952, 19, 961, 607, 862, 554, 661, 913, 909, 511, 752, 986, 311, 287, 775,
			505, 878, 422, 103, 299, 119, 107, 344, 887, 776, 445, 218, 549, 697, 454, 996,
			462, 455, 952, 981, 594, 126, 112, 66, 877, 972, 153, 912, 834, 941, 610, 915,
			964, 831, 575, 914, 250, 461, 814, 913, 369, 542, 882, 851, 427, 838, 867, 507,
			434, 569, 209, 950, 992, 605, 798, 962, 923, 258, 972, 762, 809, 843, 674, 948,
			280, 495, 985, 822, 283, 147, 451, 993, 794, 982, 748, 189, 974, 896, 973, 810,
			401, 261, 277, 346, 527, 645, 601, 868, 248, 879, 371, 428, 559, 278, 265, 762,
			516, 457, 286, 897, 921, 852, 971, 658, 923, 528, 316, 871, 860, 306, 638, 911,
			875, 671, 108, 958, 946, 924, 957, 94, 993, 941, 902, 599, 965, 334, 506, 684,
			960, 780, 429, 801, 910, 308, 383, 901, 489, 981, 512, 164, 755, 514, 723, 141,
			296, 958, 686, 915, 999, 579, 598, 558, 914, 964, 420, 730, 256, 191, 945, 129,
			259, 338, 999, 975, 940, 790, 324, 985, 896, 482, 841, 606, 377, 111, 372, 699,
			284, 447, 914, 672, 758, 954, 804, 992, 928, 886, 421, 996, 574, 916, 892, 968,
			546, 522, 890, 873, 656, 696, 864, 930, 940, 393, 926, 394, 932, 876, 664, 993,
			854, 916, 955, 196, 842, 498, 977, 948, 540, 127, 271, 113, 844, 576, 132, 943,
			912, 123, 291, 931, 212, 529, 547, 971, 582, 609, 793, 830, 291, 440, 568, 118,
			113, 995, 452, 701, 861, 472, 108, 905, 870, 984, 959, 320, 954, 441, 772, 65,
			864, 975, 582, 428, 228, 106, 702, 551, 914, 833, 904, 613, 266, 757, 863, 202,
			963, 577, 965, 214, 962, 841, 947, 970, 961, 724, 932, 709, 126, 309, 850, 703,
			991, 554, 920, 189, 875, 869, 936, 945, 72, 369, 736, 908, 150, 357, 467, 345,
			998, 887, 940, 960, 966, 793, 734, 640, 325, 319, 489, 725, 453, 423, 148, 170,
			724, 536, 403, 812, 70, 711, 415, 658, 793, 395, 716, 831, 453, 776, 760, 994,
			837, 957, 22, 303, 800, 305, 976, 915, 976, 599, 143, 943, 869, 465, 160, 873,
			949, 875, 861, 821, 897, 822, 898, 815, 926, 829, 972, 998, 905, 923, 846, 970,
			995, 920, 871, 994, 988, 838, 894, 997, 931, 930, 932, 941, 892, 970, 830, 991,
			812, 941, 846, 836, 845, 823, 916, 843, 863, 914, 856, 941, 928, 859, 822, 826,
			855, 961, 901, 816, 856, 826, 818, 839, 997, 827, 970, 928, 840, 836, 840, 921,
			969, 884, 980, 843, 808, 851, 989, 871, 822, 967, 885, 894, 972, 946, 853, 900,
			994, 845, 863, 941, 859, 962, 947, 808, 988, 937, 852, 999, 941, 961, 972, 852,
			818, 801, 978, 955, 940, 896, 823, 830, 946, 814, 852, 817, 953, 817, 901, 868,
			769, 786, 786, 261, 844, 316, 770, 965, 172, 514, 813, 565, 58, 998, 976, 630,
			670, 583, 859, 776, 376, 325, 415, 81, 669, 687, 301, 333, 685, 259, 507, 503,
			919, 843, 800, 956, 891, 828, 977, 900, 843, 962, 898, 940, 869, 952, 821, 881,
			999, 987, 548, 225, 378, 127, 659, 697, 433, 600, 878, 798, 323, 678, 760, 294,
			539, 90, 927, 81, 995, 796, 483, 570, 435, 944, 561, 447, 534, 926, 813, 272,
			887, 845, 816, 814, 862, 824, 840, 904, 827, 986, 816, 827, 990, 818, 881, 965,
			962, 806, 816, 875, 852, 822, 986, 895, 908, 896, 870, 987, 888, 984, 913, 816,
			847, 959, 890, 953, 823, 995, 824, 989, 828, 808, 972, 947, 828, 924, 871, 883,
			934, 863, 897, 852, 859, 969, 855, 882, 883, 853, 983, 967, 981, 863, 999, 962,
			803, 892, 952, 812, 858, 864, 819, 882, 989, 926, 997, 885, 939, 851, 804, 979,
			92, 249, 919, 783, 895, 676, 871, 82, 34, 94, 708, 25, 468, 94, 926, 641, 999,
			963, 512, 480, 324, 79, 221, 195, 728, 850, 916, 930, 316, 226, 229, 961, 406,
			873, 811, 820, 870, 897, 976, 942, 886, 826, 862, 956, 836, 957, 835, 958, 805,
			985, 823, 901, 863, 946, 923, 914, 953, 924, 935, 876, 910, 924, 892, 910, 849,
			860, 228, 759, 954, 602, 768, 854, 964, 909, 333, 611, 714, 768, 423, 378, 348,
			598, 424, 747, 614, 926, 596, 724, 945, 593, 918, 741, 649, 749, 629, 88, 505,
			115, 387, 999, 612, 23, 664, 226, 450, 947, 615, 299, 703, 700, 218, 661, 725,
			815, 791, 740, 248, 892, 873, 838, 235, 777, 756, 453, 919, 896, 262, 874, 256,
			509, 763, 860, 712, 891, 247, 265, 272, 611, 377, 144, 746, 761, 820, 696, 728,
			394, 657, 49, 165, 161, 885, 798, 98, 738, 921, 704, 486, 717, 688, 864, 929,
			973, 990, 937, 915, 990, 823, 801, 922, 994, 969, 906, 865, 975, 920, 808, 896,
			837, 912, 922, 880, 967, 997, 858, 841, 814, 964, 917, 890, 949, 902, 823, 909,
			870, 835, 806, 818, 783, 867, 858, 926, 810, 870, 932, 949, 840, 823, 906, 806,
			925, 961, 844, 915, 816, 827, 871, 853, 964, 929, 876, 937, 863, 967, 954, 868,
			940, 947, 981, 663, 597, 866, 297, 457, 243, 469, 78, 750, 177, 207, 773, 840,
			895, 788, 59, 971, 904, 533, 627, 301, 945, 960, 587, 657, 56, 237, 970, 110,
			753, 956, 986, 432, 62, 679, 407, 116, 180, 910, 128, 383, 180, 749, 766, 894,
			441, 532, 219, 541, 657, 658, 777, 358, 906, 586, 597, 911, 714, 158, 286, 958,
			425, 125, 902, 411, 898, 320, 661, 561, 599, 145, 962, 857, 735, 32, 16, 887,
			929, 487, 999, 638, 13, 348, 984, 910, 39, 655, 901, 764, 743, 192, 974, 989,
			60, 760, 356, 823, 30, 119, 618, 826, 759, 736, 254, 818, 348, 259, 429, 994,
			715, 513, 556, 820, 402, 865, 680, 734, 827, 238, 932, 538, 930, 233, 789, 80,
			136, 648, 528, 882, 612, 529, 774, 175, 507, 166, 883, 450, 327, 838, 593, 916,
			400, 216, 707, 822, 68, 448, 776, 847, 594, 16, 864, 935, 887, 342, 832, 360,
			300, 421, 79, 832, 300, 73, 537, 640, 741, 567, 851, 745, 844, 393, 319, 228,
			385, 853, 520, 351, 167, 482, 453, 387, 634, 236, 641, 474, 253, 603, 937, 149,
			578, 104, 489, 563, 122, 733, 777, 694, 527, 403, 841, 938, 808, 789, 906, 288,
			784, 11, 114, 459, 443, 911, 921, 144, 81, 843, 167, 950, 744, 287, 888, 170,
			720, 912, 865, 440, 121, 737, 791, 254, 933, 413, 793, 37, 864, 976, 241, 431,
			737, 963, 23, 417, 546, 572, 749, 974, 370, 7, 702, 706, 700, 520, 386, 967,
			28, 169, 491, 329, 958, 582, 175, 979, 50, 759, 343, 899, 231, 796, 807, 40,
			890, 396, 828, 738, 911, 929, 215, 979, 898, 708, 240, 822, 923, 901, 263, 480,
			14, 774, 923, 745, 238, 115, 561, 609, 940, 352, 816, 769, 797, 65, 494, 731,
			485, 201, 272, 852, 917, 377, 320, 569, 824, 907, 816, 805, 101, 724, 931, 908,
			703, 374, 994, 802, 351, 559, 208, 328, 921, 623, 811, 825, 887, 922, 899, 997,
			628, 475, 767, 33, 651, 593, 685, 250, 423, 950, 724, 643, 887, 501, 187, 615,
			724, 380, 372, 813, 945, 780, 485, 930, 796, 753, 943, 465, 716, 309, 892, 251,
			257, 324, 534, 708, 33, 50, 212, 766, 286, 365, 889, 516, 330, 777, 824, 419,
			586, 239, 705, 399, 343, 218, 886, 551, 222, 392, 69, 758, 786, 243, 500, 250,
			504, 984, 475, 951, 312, 954, 712, 948, 866, 54, 362, 828, 37, 873, 446, 159,
			788, 833, 661, 426, 39, 410, 284, 44, 970, 749, 23, 412, 67, 224, 798, 189,
			25, 965, 75, 858, 353, 701, 728, 431, 965, 891, 709, 711, 712, 853, 911, 746,
			308, 778, 547, 148, 407, 379, 996, 13, 949, 433, 814, 524, 801, 509, 865, 68,
			76, 990, 188, 594, 934, 812, 883, 823, 259, 875, 799, 582, 572, 313, 408, 646,
			507, 811, 770, 795, 985, 514, 715, 218, 687, 18, 546, 176, 271, 147, 818, 604,
			859, 903, 272, 750, 202, 455, 85, 898, 787, 852, 842, 304, 798, 559, 838, 450,
			239, 249, 260, 968, 882, 383, 21, 208, 518, 771, 634, 89, 84, 526, 883, 792,
			135, 346, 381, 946, 877, 406, 197, 824, 473, 328, 86, 33, 95, 336, 189, 837,
			99, 530, 907, 216, 284, 702, 230, 695, 806, 629, 54, 437, 109, 899, 28, 123,
			939, 373, 638, 960, 383, 594, 258, 977, 160, 827, 161, 724, 774, 915, 389, 961,
			953, 221, 962, 110, 935, 698, 924, 222, 831, 917, 541, 145, 366, 908, 774, 845,
			496, 574, 562, 836, 382, 774, 992, 567, 749, 817, 951, 732, 191, 904, 202, 826,
			508, 553, 922, 519, 736, 172, 186, 608, 588, 99, 824, 445, 865, 293, 684, 638,
			721, 536, 862, 879, 828, 274, 713, 814, 614, 294, 409, 778, 672, 472, 978, 439,
			454, 976, 211, 971, 971, 631, 399, 950, 373, 335, 929, 426, 552, 596, 269, 981,
			799, 913, 327, 944, 939, 119, 622, 178, 868, 859, 503, 827, 63, 912, 540, 390,
			224, 501, 753, 998, 923, 56, 859, 285, 852, 323, 545, 109, 252, 371, 832, 5,
			554, 360, 958, 872, 429, 364, 955, 556, 718, 734, 767, 752, 784, 147, 775, 836,
			433, 364, 818, 210, 778, 974, 490, 440, 943, 772, 107, 525, 53, 287, 727, 385,
			758, 159, 179, 879, 829, 798, 800, 863, 668, 805, 87, 357, 912, 39, 315, 11,
			732, 360, 659, 815, 449, 955, 963, 992, 714, 747, 757, 142, 516, 113, 779,
			916, 473, 801, 18, 484, 692, 965, 928, 758, 604, 885, 194, 973, 21, 436, 940,
			202, 841, 10, 224, 848, 147, 139, 781, 770, 711, 731, 795, 151, 976, 169, 933,
			580, 860, 860, 586, 830, 899, 167, 765, 839, 934, 887, 318, 992, 974, 878, 678,
			20, 951, 203, 550, 711, 527, 873, 867, 809, 485, 131, 791, 669, 967, 282, 343,
			37, 408, 753, 905, 686, 901, 972, 874, 800, 532, 464, 669, 218, 984, 982, 578,
			385, 806, 792, 968, 697, 97, 933, 779, 534, 279, 975, 871, 375, 432, 100, 288,
			249, 513, 661, 798, 702, 261, 639, 979, 150, 152, 337, 919, 320, 770, 622, 879,
			697, 289, 975, 981, 190, 123, 915, 987, 29, 805, 895, 993, 882, 74, 730, 862,
			406, 194, 827, 860, 622, 389, 800, 571, 213, 262, 403, 408, 881, 289, 635, 967,
			749, 940, 954, 847, 951, 779, 900, 717, 729, 786, 980, 752, 973, 961, 762, 920,
			738, 896, 908, 888, 712, 889, 884, 942, 938, 845, 739, 858, 954, 890, 711, 879,
			907, 821, 890, 787, 892, 774, 793, 736, 721, 837, 955, 730, 963, 717, 889, 911,
			802, 984, 872, 708, 819, 964, 707, 785, 927, 780, 796, 945, 863, 712, 797, 760,
			432, 376, 649, 832, 857, 917, 145, 510, 159, 980, 683, 580, 784, 379, 246, 988,
			577, 963, 990, 537, 416, 426, 914, 691, 823, 281, 997, 508, 48, 681, 581, 928,
			899, 795, 930, 971, 957, 889, 206, 813, 839, 709, 805, 253, 851, 613, 65, 854,
			993, 639, 784, 991, 852, 967, 430, 754, 976, 787, 943, 676, 362, 961, 874, 330,
			331, 384, 985, 917, 855, 818, 738, 361, 314, 993, 615, 520, 355, 920, 689, 922,
			845, 854, 932, 971, 929, 847, 754, 919, 867, 756, 950, 924, 741, 747, 920, 753,
			188, 949, 904, 935, 636, 475, 693, 749, 919, 812, 100, 207, 963, 964, 464, 572,
			731, 930, 833, 385, 499, 545, 273, 232, 398, 478, 975, 564, 399, 504, 35, 562,
			934, 910, 137, 995, 968, 695, 989, 907, 396, 474, 976, 737, 796, 446, 37, 894,
			185, 491, 966, 247, 13, 587, 602, 409, 935, 650, 235, 611, 970, 442, 597, 254,
			343, 539, 146, 585, 593, 641, 770, 94, 976, 705, 181, 255, 315, 718, 526, 987,
			692, 983, 595, 898, 282, 3, 439, 633, 534, 861, 269, 619, 677, 502, 375, 924,
			940, 947, 350, 270, 933, 116, 736, 999, 74, 104, 767, 318, 735, 859, 357, 555,
			411, 267, 712, 675, 932, 825, 496, 927, 942, 902, 46, 192, 914, 744, 138, 998,
			972, 617, 934, 846, 166, 999, 900, 975, 303, 387, 400, 47, 729, 922, 222, 197,
			951, 509, 524, 165, 485, 300, 944, 980, 625, 778, 685, 929, 589, 766, 961, 391,
			25, 437, 732, 956, 275, 200, 970, 753, 791, 336, 556, 847, 703, 236, 715, 675,
			863, 713, 985, 911, 986, 620, 551, 413, 39, 739, 820, 808, 764, 701, 819, 173,
			935, 264, 789, 340, 659, 466, 356, 288, 656, 708, 557, 488, 760, 332, 402, 168,
	};
	private static final int RANDOM_NUMBERS_LEN = RANDOM_NUMBERS.length;

	public static Color getRandomColor() {
		int red = ThreadLocalRandom.current().nextInt(256);
		int blue = ThreadLocalRandom.current().nextInt(256);
		int green = ThreadLocalRandom.current().nextInt(256);
		return new Color(red, blue, green);
	}

	/**
	 * 深色主题使用的随机颜色
	 *
	 * @return 随机深色颜色
	 */
	public static Color getRandomColorDark() {
		return getRandomColorDark(MAX_COLOR_ELEMENT);
	}

	/**
	 * 浅色主题使用的随机颜色
	 *
	 * @return 随机浅色颜色
	 */
	public static Color getRandomColorLight() {
		return getRandomColorLight(MIN_COLOR_ELEMENT);
	}

	/**
	 * 为深色主题创建的随机颜色
	 */
	public static Color getRandomColorDark(int maxLimitation) {
		int red = getRandomInt(256);
		int blue = getRandomInt(256);
		int green = getRandomInt(256);
		if (red > maxLimitation || blue > maxLimitation || green > maxLimitation) {
			//again when all color value larger than the max value.
			return getRandomColorDark(maxLimitation);
		}
		return new Color(red, blue, green);
	}

	public static Color getRandomColorLight(int minLimitation) {
		int red = getRandomInt(256);
		int blue = getRandomInt(256);
		int green = getRandomInt(256);
		if (red < minLimitation || blue < minLimitation || green < minLimitation) {
			//again when all color value smaller than the min value.
			return getRandomColorLight(minLimitation);
		}
		return new Color(red, blue, green);
	}

	public static int getRandomNum() {
		return getRandomInt(Integer.MAX_VALUE);
	}

	public static int getRandomInt(int maxNum) {
		return getRandomInt(0, maxNum);
	}

	public static long getRandomLong(long maxNum) {
		return ThreadLocalRandom.current().nextLong(maxNum);
	}

	public static int getRandomInt(int min, int max) {
		if (max <= min) {
			return min;
		}
		return ThreadLocalRandom.current().nextInt(min, max);
//        int i = max + 1;
//        double value = 1;
//
//        if (max > 600) {
//            value = max / 600d;
//        }
//        while (i < min || i >= max) {
//            double random = Math.random();
////            int tmp = RANDOM_NUMBERS[SECURE_RANDOM.nextInt(RANDOM_NUMBERS_LEN)];
//            int tmp = RANDOM_NUMBERS[THREAD_LOCAL_RANDOM.nextInt(RANDOM_NUMBERS_LEN)]
//                      + RANDOM_NUMBERS[THREAD_LOCAL_RANDOM.nextInt(RANDOM_NUMBERS_LEN)] / 3;
//            i = (int) (random * tmp * value);
//            if (THREAD_LOCAL_RANDOM.nextInt() % 3 == 0) {
//                i = (int) ((max - i) * random * 9);
//            }
//        }
//        return i;
	}

	/**
	 * @return 一个0到1之间的double值
	 */
	public static double getRandomDouble() {
		return Math.random();
	}

	/**
	 * 字符串单字乱序算法
	 */
	public static String getRandomString(String str) {
		if (str.length() == 1) {
			return str;
		}
		char[] c = str.toCharArray();
		LinkedList<Integer> li = QRArrayUtils.getOrderedIntegers(c.length);
		ArrayList<QRCharRandomData> asr = new ArrayList<>();
		for (int i = 0; li.size() != 0; ) {
			int num = li.get(getRandomInt(li.size()));
			if (i != num) {
				asr.add(new QRCharRandomData(c[i++], num));
				li.remove(Integer.valueOf(num));
			} else if (i == c.length - 1 && li.size() == 1 && li.get(0) == i) {
				return getRandomString(str);
			}
		}
		//对每个字对应的随机数进行排序
		Collections.sort(asr);
		StringBuilder sb = new StringBuilder();
		for (QRCharRandomData srd : asr) {
			sb.append(srd.c());
		}
		return sb.toString();
	}

	/**
	 * 生成指定长度的随机数字符
	 */
	public static String getRandomString(int length) {
		String str = getRandomString("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-+\\./[$%#&@");
		return getRandomString(length, str);
	}

	public static String getRandomFileName(int length) {
		String str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_";
		return getRandomString(length, str);
	}

	public static String getRandomString(int length, String chars) {
		StringBuilder sb = new StringBuilder();
		char preChar = ' ';
		final int strLen = chars.length();
		for (int i = 0; i < length; i++) {
			int number = getRandomInt(strLen);
			final char charAt = chars.charAt(number);
			if (charAt == preChar) {
				i--;
				continue;
			}
			sb.append(charAt);
			preChar = charAt;
		}
		return sb.toString();
	}

	/**
	 * 按权重分配随机值，简单地来说，{@code weight} 越大，取得 {@code range} 内随机到的值就越大
	 * <p>以作者某次测试结果为例：当 {@code range = 20}时，{@code weight = 0.8} 与 {@code weight = 0.9}
	 * <p>取到 {@code 3.8} 和 {@code 17.8} 的概率分别为 {@code 0.108%}、{@code 0.086%} 和 {@code 0.734 %}、{@code 0.902%}
	 *
	 * @param range  随机数的范围
	 * @param weight 随机到大数的权重
	 * @return {@code range} 内的随机值
	 */
	public static double getRandomFromRangeByWeight(final double range, final double weight) {
		final double v;
		v = getRandomDouble() * weight * range * 2
//            + getRandomDouble() * weight * extent
		    + getRandomDouble() * weight * range;
		if (v > range) {
			return getRandomFromRangeByWeight(range, weight);
		}
		return v;

	}
}
